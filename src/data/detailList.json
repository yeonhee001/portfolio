{
  "sangreen": [
    {
      "info": [
        { "id": 1,
          "logo": "sangreenLogo.svg",
          "slideImage": ["DetailImg0101.png", "DetailImg0102.png", "DetailImg0103.png"],
          "title": "산그린 펜션",
          "tools": ["HTML5", "Sass", "JavaScript"],
          "desc": "리뉴얼 반응형 웹사이트 PC, Tab, Mobile",
          "intro": "저희는 사이트 배포 후 관리가 필요한 기존 사이트를 선정하여, 고객 확보를 위한 트렌디한 디자인과 사용자를 고려한 편리한 기능을 중심으로 한 리뉴얼 프로젝트입니다.",
          "period": "2025.02.03 - 2025.02.24\n평일 기준 총 16일 (기초 데이터 수집 및 화면 설계 기간 : 5일, 개발 및 테스트 기간 : 11일)",
          "contribution": "팀 프로젝트 (4인) & 기여도 30%",
          "environment": "Windows OS, Visual Studio Code, Chrome(개발자 도구 활용)",
          "role": "index.html  |  header.html  |  footer.html",
          "keyFeatures": "1. 객실 정보 제공 ㅣ 객실별 사진, 설명, 편의시설, 최대 인원 표시\n2. 예약 시스템 ㅣ 드래그 방식으로 연박 예약 지원, 예약 가능 여부 시각적 표시, 객실별 예약 내역 반영\n3. 고객 편의 기능 ㅣ 카카오맵 API 지도를 사용하여 펜션의 정확한 위치 안내, 예약 내역 조회 및 취소 기능",
          "site": "https://yeonhee001.github.io/sangreen-01project/",
          "github": "https://github.com/yeonhee001/sangreen-01project",
          "notion": "https://www.notion.so/soyeonhee/_-21d2ffab606380a38ac7c36093a0cc0d"
        }
      ],
      "detail": [
        { "img": "DetailImg0104.png",
          "title": "슬라이드",
          "content": "메인 페이지에서 총 2개의 swiper slide를 사용하였습니다.\n메인 슬라이드에서는 이미지가 슬라이드 될 때, 해당 이미지에 맞는 텍스트가 올라오도록 하기 위해 이미지의 index값을 추출하여 opacity와 translateY값을 주어 적용하였습니다."
        },
        { "img": "DetailImg0105.png",
          "title": "객실 정보 제공",
          "content": "객실 이미지를 슬라이드 5장으로 보여주며, 이미지 아래에 객실 정보와 가격을 넣어 사용자들에게 정보를 전달해주도록 하였습니다.\n또, 이미지 클릭 시 팝업창이 열려 이미지를 확대한 상태로 볼 수 있도록 구성하였습니다.\n우측에 호실 버튼을 누르게 되면 각 호실로 위치가 이동되어 보여지게 됩니다."
        },
        { "img": "DetailImg0106.png",
          "title": "예약하기",
          "content": "예약하기 바를 통해 호실 선택, 날짜 선택, 인원 선택을 팝업창을 통해 할 수 있습니다.\n날짜를 드래그하여 체크인-체크아웃을 선택 가능하며, localStorage에서 데이터를 불러와 예약 완료된 날짜는 회색 표시가 적용되도록 하였습니다.\n메인 페이지와 예약하기 페이지에서 예약이 가능하므로, localStorage를 사용하여 다른 페이지에서도 저장된 데이터를 사용할 수 있도록 하였습니다.\n예약자 정보를 입력하고 개인정보 수집 동의에 체크가 되어있을 때, 예약이 가능하며 예약 확인과 취소가 가능하도록 했습니다."
        }
      ],
      "issue": [
        { 
          "title": "header.html",
          "list": [
            {
              "content": "1. 버거 메뉴 클릭 후 스크롤시 하단에 여백이 생기는 이슈 발생",
              "text1": "*헤더가 아래로 스크롤시 숨겨지는 방식인데, 버거 메뉴 클릭한 상태에서도 적용되는 상황",
              "text2": "⇒ 해결방법: 버거 버튼에 active 클래스 여부를 확인하여, true일 경우 스크롤을 숨기게 하여 버거 메뉴가 보일 시 스크롤이 불가하게 작업함"
            }
          ]
        },
        {
          "title": "index.html",
          "list": [
            {
              "content": "1. [메인 슬라이드 섹션]첫 페이지 로드 시 메인 슬라이드의 텍스트 효과가 한번에 적용되어 슬라이드가 넘어가도 애니메이션 효과가 없는 이슈 발생",
              "text1": "*메인 슬라이드 위 각 슬라이드마다 텍스트 애니메이션 효과를 적용한 상황",
              "text2": "⇒ 해결방법: swiper.on을 사용하여 슬라이드가 움직일 때마다 텍스트 효과가 나타나게 적용"
            },
            {
              "content": "2. [RoomList 섹션] 룸 이미지 클릭 시 각 호실의 정보를 가지고 있는 부모가 이미지의 너비값만 가지고 있는 이슈 발생",
              "text2": "⇒ 해결방법: active 클래스가 들어갔을 때, flex-shrink와 총 너비값을 넣어 영역을 지정"
            },
            {
              "content": "3. [Special 섹션] 해당 부분의 스크롤이벤트를 반응형에서 해제해야하는 이슈 발생",
              "text2": "⇒ 해결방법: 반응형에서 스크립트 기능을 해제하기 위해 window.matchMedia를 지정하여 처리"
            },
            {
              "content": "4. [Special 섹션] 예약하기 바를 fixed 상태로 두었는데 해당 섹션의 스크롤이벤트로 fixed 상태가 적용되지 않는 이슈 발생",
              "text1": "*body에 translateY값을 주어 스크롤이 발생되어 예약하기 바 fixed가 적용이 안되는 상황",
              "text2": "⇒ 해결방법: translateY값을 body가 아닌 wrap클래스명을 지정하여 이곳에 값을 적용시키고, wrap클래스 태그 바깥으로 예약하기 바 관련 태그를 꺼내어 fixed가 적용되게 처리함"
            },
            {
              "content": "5. [TourSpot 섹션] 메인 페이지에서 swiper slide를 두번 사용하는 이슈 발생",
              "text2": "⇒ 해결방법: 두 번째 슬라이드를 사용할 때, mySwiper의 클래스명을 변경하여 서로 다른 스와이퍼로 처리"
            }
          ]
        }
      ]
    }
  ],
  "yeonflix": [
    {
      "info": [
        { "id": 2,
          "logo": "yeonFLIXLogo.svg",
          "slideImage": ["DetailImg0201.png", "DetailImg0202.png", "DetailImg0203.png", "DetailImg0204.png"],
          "title": "yeonFLIX",
          "tools": ["React", "Sass", "Axios", "Zustand", "ThemovieDB API"],
          "desc": "영화 등 정보 전달 웹사이트 PC, Tab, Mobile",
          "intro": "yeonFLIX는 사용자가 영화 및 TV프로그램에 대한 정보를 확인할 수 있는 서비스입니다. \nthemoviedb API를 활용하여 개발되었습니다.",
          "period": "2025.03.10 - 2025.03.14 \n총 5일 (기초 데이터 수집 및 화면 설계 기간 : 2일, 개발 및 테스트 기간 : 3일)",
          "contribution": "개인 프로젝트 & 기여도 100%",
          "environment": "Windows OS, Visual Studio Code, Chrome(개발자 도구 활용)",
          "role": "Home.jsx  |  Movies.jsx  |  TVSeries.jsx  |  List.jsx  |  Header.jsx  |  Footer.jsx",
          "keyFeatures": "1. 최신 콘텐츠 리스트 제공 ㅣ 인기있는 영화 및 TV 프로그램을 한눈에 볼 수 있도록 최신 업데이트된 작품 목록 제공\n2. 미디어 상세 정보 확인 ㅣ 선택한 미디어의 개요, 장르, 방영일, 출연진, 예고편 등 정보 확인 가능\n3. 영화 및 TV 프로그램 정보 검색 ㅣ 사용자가 영화, TV 프로그램 키워드 입력시 결과값 제공",
          "site": "https://movie-02semiproject.vercel.app",
          "github": "https://github.com/yeonhee001/movie-01semiproject",
          "notion": "https://www.notion.so/soyeonhee/yeonFLIX_-21e2ffab60638044aac4f342e73619ce"
        }
      ],
      "detail": [
        { "img": "DetailImg0205.png",
          "title": "최신 콘텐츠 리스트 제공",
          "content": "ThemoveDB API를 활용하여 영화와 TV프로그램 리스트를 Axios와 Zustand를 활용하여 정보를 불러오게 됩니다.\n리스트는 더보기 버튼을 통해 리스트를 추가로 노출시키도록 했습니다."
        },
        { "img": "DetailImg0206.png",
          "title": "상세 정보 확인",
          "content": "해당 콘텐츠의 아이디값을 찾아 해당되는 정보를 보여주며, 예고편 부분을 추가하고 하단에 베스트 작품 둘러보기 슬라이드를 추가하여 해당 페이지에서 다른 정보들을 볼 수 있도록 구성하였습니다."
        }
      ],
      "issue": [
        { 
          "title": "Movies.jsx / TVSeries.jsx",
          "list": [
            {
              "content": "1. 검색 후 카테고리를 다시 클릭했을 때 기존 리스트가 표시되지 않는 이슈 발생",
              "text1": "*Movies, TV Series 페이지에서 검색한 후, 상단 카테고리를 다시 클릭하면 기존 리스트가 다시 표시되지 않는 상황",
              "text2": "⇒ 해결방법: Header 컴포넌트에서 window.location.href = path를 사용하여 클릭 시 페이지가 새로고침되도록 처리해 리스트가 초기화되어 다시 표시되도록 처리"
            },
            {
              "content": "2. 더보기 버튼 클릭 시 리스트가 새롭게 갱신되는 이슈 발생",
              "text1": "*더보기 버튼 클릭 시 이전 데이터는 사라지고 새로운 데이터로만 리스트가 갱신되는 문제 발생",
              "text2": "⇒ 해결방법: setMovList를 사용할 때 기존 리스트와 새 리스트를 함께 누적시켜 저장하고, map 함수에서 movList를 사용하여 누적된 콘텐츠가 계속 표시되도록 수정"
            }
          ]
        },
        {
          "title": "List.jsx",
          "list": [
            {
              "content": "1. 상세 페이지에서 올바른 콘텐츠 정보를 불러오지 못하는 이슈 발생",
              "text1": "*URL의 id 값과 실제 데이터의 id가 일치할 때만 상세 정보가 표시되어야 했지만, 정보가 불러와지지 않는 문제 발생",
              "text2": "⇒ 해결방법: window.location.pathname을 이용해 type과 id 값을 추출하고, 이를 tvdbState의 detail 함수에 전달하여 해당 콘텐츠의 상세 데이터를 정확히 불러오도록 처리"
            }
          ]
        }
      ]
    }
  ],
  "tteonabobseo": [
    {
      "info": [
        { "id": 3,
          "logo": "tnbsLogo.svg",
          "slideImage": ["DetailImg0301.png", "DetailImg0302.png", "DetailImg0303.png", "DetailImg0304.png", "DetailImg0305.png"],
          "title": "떠나봅서",
          "tools": ["React", "Sass", "Axios", "Zustand", "Node.js", "express", "MongoDB", "오픈API"],
          "desc": "정보 전달 웹사이트 PC, Tab, Mobile",
          "intro": "React와 비짓제주, 기상청 오픈 API를 활용하여 제주 여행자들이 쉽게 정보를 수집하고 즐겁게 여행 계획을 세울 수 있는 웹 서비스입니다.",
          "period": "2025.03.20 - 2025.04.24\n평일 기준 총 26일 (기초 데이터 수집 및 화면 설계 기간 : 7일, 개발 및 테스트 기간 : 19일)",
          "contribution": "팀 프로젝트 (5인) & 기여도 30%",
          "environment": "Windows OS, Visual Studio Code, Chrome(개발자 도구 활용)",
          "role": "Home.jsx  |  검색(search 폴더)  |  트립(trip 폴더)",
          "keyFeatures": "1. 오픈 API 활용 ㅣ 제주비짓 API와 기상청 API를 활용하여 제주 관련 정보를 받아오고, 제주 날씨 정보를 제공\n2. 장소 정보 ㅣ 제주 여행지 관련 장소를 좋아요 누를 수 있고, 클릭한 장소를 기준으로 주변 관광지 추천 기능 제공\n3. 커뮤니티 ㅣ 게시글 작성 조회, 댓글 및 좋아요 기능\n4. 내 여행 ㅣ 여행 일정을 생성하고 일정별 장소 추가 및 관리하고 추천 일정을 제공\n5. 마이페이지 ㅣ 여행 체크리스트 확인 및 관리가 가능하고, 내가 작성한 글과 좋아요 한 항목 확인 가능",
          "site": "https://jeju-trip-02project.vercel.app",
          "github": "https://github.com/yeonhee001/jeju-trip-02project",
          "notion": "https://www.notion.so/soyeonhee/_-21e2ffab606380e39642f2e9daa8d14f"
        }
      ],
      "detail": [
        { "img": "DetailImg0306.png",
          "title": "오픈 API를 활용한 장소 정보 출력",
          "content": "공공데이터 포털사이트에서 오픈 API 제주비짓 데이터 수집 후 키를 발급 받아 관광지, 맛집, 축제, 쇼핑 4가지 카테고리 정보를 사용합니다.\nAxios와 Zustand를 사용하여 해당 데이터를 화면에 출력하게 됩니다.\n해당 정보의 좋아요 기능은 사용자가 좋아요한 콘텐츠 id 리스트를 받아 상태에 저장하게 됩니다. {postId: count} 형태로 응답하여 각 콘텐츠의 좋아요 수를 불러오게 됩니다.\n리스트의 정렬은 오름차순, 내림차순, 좋아요순으로 되어있어 실시간으로 재정렬되도록 설정하였습니다."
        },
        { "img": "DetailImg0307.png",
          "title": "커뮤니티",
          "content": "하단 플러스 버튼 클릭 시, 게시글 작성 가능한 페이지로 이동되며, 주제 선택 후 이미지 등록 및 내용 작성이 가능합니다.\n업로드 된 게시글은 선택한 주제별로 구분되며 좋아요와 댓글 작성이 가능합니다.\n좋아요는 localStorage에 상태를 저장하여 해당 값에 따라 상태가 변하게 되고, 댓글 작성 시, 서버에 전송되어 저장되게 됩니다.\n수정 삭제 버튼의 경우 해당 작성자의 글에만 노출되어 수정과 삭제가 가능하도록 하였습니다."
        },
        { "img": "DetailImg0308.png",
          "title": "내 여행 및 오픈 API를 활용한 날씨 정보",
          "content": "공공데이터 포털사이트에서 오픈 API 기상청 데이터 수집 후 키를 발급 받아 단기예보, 중기예보를 활용하였습니다. 각 컴포넌트에 필요한 데이터만 추출하여 가공 및 병합을 진행하여 노출시켰습니다.\n여행 일정 선택 후 장소를 추가하여 저장하게 됩니다. 지역별 장소와 좋아요 누른 장소 탭으로 구분하여 장소 선택이 가능하도록 하였습니다."
        }
      ],
      "issue": [
        { 
          "title": "Home.jsx",
          "list": [
            {
              "content": "1. 헤더와 바텀 메뉴를 숨겨야 할 페이지 설정 이슈 발생",
              "text1": "*특정 페이지에서는 헤더와 바텀 메뉴를 숨겨야 하는 상황",
              "text2": "⇒ 해결방법: hiddenPaths 변수를 만들어 해당 경로를 지정하고, 해당 페이지일 경우 메뉴가 보이지 않도록 조건 처리"
            },
            {
              "content": "2. 콘텐츠의 랜덤 데이터가 매번 새로고침되는 이슈 발생",
              "text1": "*메인 배너 슬라이드, 관광지, 맛집 콘텐츠는 하루 동안 동일한 데이터를 유지해야 했으나, 초기에는 쿠키 저장 방식에 오류가 있어 새로고침 시마다 데이터가 초기화되는 상황",
              "text2": "⇒ 해결방법: 쿠키 대신 localStorage를 사용해 현재 시간을 저장하고, 24시간이 지나면 데이터를 삭제하고 새로 생성되도록 처리"
            },
            {
              "content": "3. 관광객 통계 팝업에서 월 선택 없이 완료 버튼이 눌리는 이슈 발생",
              "text1": "*월 선택 팝업에서 선택 없이도 완료 버튼이 눌려 팝업이 닫히는 문제",
              "text2": "⇒ 해결방법: Month 컴포넌트의 완료 버튼에 선택된 값이 없을 경우 return하도록 조건문을 추가하고, 월 선택 시에만 버튼이 활성화되도록 수정"
            }
          ]
        },
        {
          "title": "Search.jsx, SearchDetail.jsx",
          "list": [
            {
              "content": "1. 띄어쓰기가 포함된 인기 검색어가 검색되지 않는 문제",
              "text1": "*API에서 받아온 인기 검색어 중 띄어쓰기가 있는 경우 검색 결과가 정상적으로 출력되지 않는 상황",
              "text2": "⇒ 해결방법: 검색어 데이터를 map으로 순회하며 replace를 사용해 띄어쓰기를 제거하고, 검색이 가능하도록 처리"
            },
            {
              "content": "2. 검색어 입력 시 h3 태그에 실시간으로 반영되는 이슈 발생",
              "text1": "*검색창 아래에 있는 텍스트(h3)에 사용자가 입력하는 값이 실시간으로 반영되어 혼동되는 상황",
              "text2": "⇒ 해결방법: useState를 활용하여 실시간 반영을 막고, 검색 버튼을 눌렀을 때만 입력값이 저장되도록 로직을 수정"
            }
          ]
        },
        {
          "title": "TripDetail.jsx",
          "list": [
            {
              "content": "1. 필터링된 리스트에서 디테일 페이지 이동 시 값이 초기화되는 문제",
              "text1": "*리스트 페이지에서 필터를 적용한 후 디테일 페이지로 이동하면, 필터링된 리스트가 유지되지 않고 기본값으로 돌아가는 상황",
              "text2": "⇒ 해결방법: navigate 함수로 이동할 때 state에 filterList를 함께 전달하고, 디테일 페이지에서는 useLocation 훅을 사용해 전달받은 데이터를 기반으로 필터링된 값을 유지하도록 처리"
            }
          ]
        }
      ]
    }
  ],
  "ripo": [
    {
      "info": [
        { "id": 4,
          "logo": "ripoLogo.svg",
          "slideImage": ["DetailImg0401.png", "DetailImg0402.png", "DetailImg0403.png", "DetailImg0404.png", "DetailImg0405.png"],
          "title": "리포",
          "tools": ["React", "Sass", "PHP", "Node.js", "XAMPP", "MySQL"],
          "desc": "쇼핑몰 모바일 웹 Mobile",
          "intro": "디자인 문구와 아이템을 소개하는 SPA 웹사이트, Ripo는 일상을 기록하는 습관이 주는 즐거움과 그 의미를 널리 알리고자 기획하였습니다.",
          "period": "2025.05.08 - 2025.05.27\n평일 기준 총 14일 (기초 데이터 수집 및 화면 설계 기간 : 4일, 개발 및 테스트 기간 : 10일)",
          "contribution": "팀 프로젝트 (2인) & 기여도 50%",
          "environment": "Windows OS, Visual Studio Code, Chrome(개발자 도구 활용)",
          "role": "Splash.jsx  |  장바구니(cart 폴더)  |  결제(pay 폴더)  |  마이페이지(mypage 폴더)  |  로그인 및 회원가입(login 폴더)  |  PHP(관리자 페이지 및 데이터 저장 관리)",
          "keyFeatures": "1. 상품 정보 ㅣ 카테고리별로 상품을 구분하여 리스트 형태로 보여주며 서버와 연동된 상품 데이터를 기반으로 반영\n2. 검색 ㅣ 키워드 기반 상품 검색 가능, 추천 키워드 기능으로 쉽게 검색 가능\n3. 장바구니 ㅣ 원하는 상품을 장바구니에 담아두고 전체 및 개별 결제 가능, 선택 삭제 및 개별 삭제 기능 지원\n4. 마이페이지 ㅣ 주문 내역 확인이 가능하며, 자주 찾는 질문 정리 후 FAQ 탭 구성\n5. 관리자페이지 ㅣ PHP와 MySQL로 구현하여 상품 및 회원 데이터를 효율적으로 관리할 수 있도록 구성",
          "site": "https://ripo-tau.vercel.app",
          "github": "https://github.com/yeonhee001/ripo",
          "notion": "https://www.notion.so/soyeonhee/Ripo_-21e2ffab6063808ab9fed576772e2b87"
        }
      ],
      "detail": [
        { "img": "DetailImg0406.png",
          "title": "상품 정보",
          "content": "파라미터 값을 통해 소 카테고리명을 전달 받아 일치하는 cat_name 칼럼이 존재하는지 확인하게 됩니다. 존재할 경우, 해당 카테고리에 보여지고, 존재하지 않을 경우 안내 메시지를 출력하여 없다는 정보를 노출시킵니다.\n최근 본 상품의 경우 상세페이지에 접속 시 localStorage에 해당 상품 정보를 저장하고 같은 상품이 있을 경우 제거 후 새로 저장하는 방법으로 최대 8개를 최신순으로 정렬시킵니다."
        },
        { "img": "DetailImg0407.png",
          "title": "검색",
          "content": "키워드 검색과 최근 본 상품 부분을 넣어 사용자가 쉽게 접근할 수 있도록 작업하였습니다. 검색한 단어는 상품명에 포함된 상품만 필터링하여 리스트에 노출되게 됩니다."
        },
        { "img": "DetailImg0408.png",
          "title": "장바구니 및 마이페이지",
          "content": "sessionStorage에 저장된 mem_id를 기반으로 GET요청을 통해 사용자 장바구니 목록을 조회하게 됩니다.\n해당 데이터를 cartList와 localStorage에 저장하고, 상품 추가 및 삭제 시 localStorage가 갱신되도록 구성하였습니다.\n상품의 수량을 변경하고 싶을 때는 PUT으로 요청하여 수량과 가격이 수정되도록 작업하였고, 구매하기 버튼을 통해 결제가 완료되었을 때, 마이페에지 > 주문내역으로 상품이 들어가게 됩니다."
        }
      ],
      "issue": [
        { 
          "title": "CartList.jsx",
          "list": [
            {
              "content": "1. 장바구니에서 개별 상품을 삭제할 경우에는 화면에서 바로 반영되었으나, 여러 상품을 선택한 후 선택, 삭제 버튼을 클릭하면 화면에 삭제된 결과가 즉시 반영되지 않는 이슈 발생",
              "text1": "*선택 삭제 후 checkItems 상태를 cartList 기준으로 초기화했지만 즉각 반영되지 않음",
              "text2": "⇒ 해결방법: 해당 문제를 해결하기 위해 삭제 요청이 완료된 후 서버에서 장바구니 데이터를 다시 받아와 cartList와 checkItems 상태를 갱신하도록 처리"
            },
            {
              "content": "2. 사용자가 장바구니에서 결제하기 버튼을 클릭하지 않고 결제 페이지에서 브라우저의 뒤로가기를 누르면, 장바구니에서 상품이 사라지는 이슈 발생",
              "text1": "*결제 페이지 진입 시점에 장바구니 상태가 비워지는 로직이었음",
              "text2": "⇒ 해결방법: 이를 방지하기 위해 결제하기 버튼을 클릭한 시점에만 결제 페이지로 이동되도록 처리하여, 뒤로가기로 인한 장바구니 유실 방지"
            }
          ]
        },
        {
          "title": "Pay.jsx",
          "list": [
            {
              "content": "1. 상품 디테일 페이지에서 구매하기 버튼을 클릭하면, 결제 페이지에서 총 상품 금액이 실제보다 높게 표시되는 이슈 발생",
              "text1": "*p_price 값이 이미 수량(ea)이 곱해진 상태였는데, 결제 페이지에서 다시 한 번 * ea를 해버려 중복 계산 발생",
              "text2": "⇒ 해결방법: 이 문제를 해결하기 위해 총 금액 계산 시 * ea를 제거하였고, 금액 정보는 let product = [] 형태로 전달하지 않고 상태값으로 관리하도록 수정, Number()를 사용해 전달된 값들이 정확히 숫자형으로 인식되도록 하여 금액 계산에 오류가 없도록 보완"
            }
          ]
        },
        {
          "title": "OrderList.jsx",
          "list": [
            {
              "content": "1. 주문내역 페이지에서 특정 상품을 클릭하면 해당 상품의 상세 페이지로 이동하도록 구현했지만, 이때 type 값이 전달되지 않아 상세 페이지에서 해당 상품 정보가 정확히 매칭되지 않는 이슈 발생",
              "text1": "*orders 테이블에 상품의 cat_id(카테고리 ID)를 저장하지 않아 어떤 타입인지 알 수 없었음",
              "text2": "⇒ 해결방법: 이를 해결하기 위해 orders.php에 cat_id 컬럼을 추가하고, postData 함수에서 해당 값을 함께 저장하도록 수정, 이후 type을 정상적으로 전달받아 상세 페이지 이동 시 상품이 제대로 로드되도록 처리"
            }
          ]
        },
        {
          "title": "PayProductItem.jsx",
          "list": [
            {
              "content": "1. 결제 페이지와 주문내역 페이지에서 동일한 상품 컴포넌트를 사용하고 있는데, 결제 페이지에서는 상품을 클릭해도 상세 페이지로 이동하면 안 되며, 주문내역에서는 이동이 되어야 하는 이슈 발생",
              "text1": "*클릭 동작이 공통 컴포넌트에 항상 활성화되어 있어 모든 페이지에서 작동하고 있었음",
              "text2": "⇒ 해결방법: 이를 해결하기 위해 컴포넌트에 click prop을 추가하고 기본값을 false로 설정, 주문내역 페이지에서는 click={true}로 전달하여 해당 페이지에서만 상품 클릭 시 상세 페이지로 이동하도록 분기 처리"
            }
          ]
        }
      ]
    }
  ],
  "planit": [
    {
      "info": [
        { "id": 5,
          "logo": "planitLogo.svg",
          "slideImage": ["DetailImg0601.png", "DetailImg0602.png", "DetailImg0603.png", "DetailImg0604.png"],
          "title": "플랜잇",
          "tools": ["Flutter", "Dart", "GetX", "hive"],
          "desc": "일정 관리 앱 Mobile",
          "intro": "매일 목표에 집중할 수 있도록 간편하게 일정 등록과 확인을 할 수 있도록 구성하고, 다양한 연령층을 고려하여 사용자 중심의 직관적인 UX를 제공할 수 있도록 기획 및 개발을 진행하였습니다.",
          "period": "2025.06.01 - 2025.06.09\n총 9일 (기초 데이터 수집 및 화면 설계 기간 : 2일, 개발 및 테스트 기간 : 7일)",
          "contribution": "개인 프로젝트 & 기여도 100%",
          "environment": "Windows OS, Visual Studio Code, Chrome(개발자 도구 활용)",
          "role": "calendar_page.dart  |  list_page.dart  |  search_page.dart",
          "keyFeatures": "1. 캘린더 ㅣ 일정을 쉽게 추가하고 확인할 수 있는 기능\n2. 리스트 ㅣ 등록한 일정을 리스트 형태로 정리하여 전체 리스트를 한눈에 확인 가능\n3. 검색 ㅣ 키워드를 입력하여 일정을 쉽게 찾아볼 수 있는 기능",
          "site": "https://schedule-mauve.vercel.app/",
          "github": "https://github.com/yeonhee001/schedule",
          "notion": "https://www.notion.so/soyeonhee/PlanIt_-21e2ffab606380c29f83e61b11a01eed"
        }
      ],
      "detail": [
        { "img": "DetailImg0605.png",
          "title": "캘린더",
          "content": "TableCalendar 라이브러리 활용하여 선택한 날짜에 맞춰 일정 목록이 동기화 되며, 일정 추가, 확인, 삭제 기능이 제공됩니다.\n플러스 버튼 클릭 시, 입력 폼이 열려 제목, 시간, 메모, 카테고리 선택, 중요도 선택을 할 수 있습니다.\n일정 삭제 시, 삭제 확인 팝업으로 알려주며 확인 버튼 클릭 시 삭제가 완료됩니다."
        },
        { "img": "DetailImg0606.png",
          "title": "리스트",
          "content": "데이터를 날짜별로 분류하여 목록 형태로 출력합니다.\n데이터가 없을 경우 controller.all.isEmpty 조건문을 통해 등록한 일정이 없다는 안내 화면이 나오고, 데이터가 있을 경우, 날짜를 기준으로 데이터를 보여주게 됩니다.\n리스트 아이템 클릭 시, 팝업으로 상세 정보 확인이 가능합니다."
        },
        { "img": "DetailImg0607.png",
          "title": "검색",
          "content": "TextFormField에서 키워드 입력 후, 검색 버튼 클릭 시, 검색 함수가 실행 되어 content, memo, category에 키워드가 포함되어있는지 검사한 후, 해당되는 항목들만 results 리스트에 저장되어 화면에 보여지게 됩니다.\n리스트 항목 클릭 시, 팝업으로 상세 정보 확인이 가능합니다."
        }
      ],
      "issue": [
        { 
          "title": "calendar_page.dart",
          "list": [
            {
              "content": "1. 일정을 등록한 후, 다른 날짜를 클릭했을 때 이전에 등록한 일정이 사라지고, 새로고침하면 나타나는 이슈 발생",
              "text1": "*저장이 완료되기 전, 날짜가 이동되면서 저장되지 않은 상태의 데이터를 화면에 반영",
              "text2": "⇒ 해결방법: 이를 해결하기 위해 saveSchedule 함수와 addSchedule 함수에서 저장이 완료될 때까지 대기한 후 일정 목록을 다시 불러오도록 async, await를 사용하여 처리"
            }
          ]
        },
        {
          "title": "list_page.dart",
          "list": [
            {
              "content": "1. 일정을 삭제한 후, 리스트를 확인해보면 내용은 없지만 해당 날짜는 그대로 남아있는 이슈 발생",
              "text1": "*값이 비어있는지만 확인하여 빈 문자열도 포함되어 있었음",
              "text2": "⇒ 해결방법: content가 비어있는 항목들은 리스트에서 제외되도록 수정"
            }
          ]
        }
      ]
    }
  ],
  "heunjeok": [
    {
      "info": [
        { "id": 6,
          "logo": "heunjeokLogo.svg",
          "slideImage": ["DetailImg0501.png", "DetailImg0502.png", "DetailImg0503.png", "DetailImg0504.png", "DetailImg0505.png", "DetailImg0506.png"],
          "title": "흔적",
          "tools": ["Flutter", "Dart", "GetX", "HTTP", "hive", "PHP", "XAMPP", "MySQL"],
          "desc": "독서 기록 앱 Mobile",
          "intro": "독서 후 기록을 남기고 싶은 사용자들을 위한 독서 기록 플랫폼을 제공하고자, 중·고등학생부터 20-30대까지 쉽게 이용 가능하도록 기획 및 개발을 진행하였습니다.",
          "period": "2025.06.10 - 2025.06.17\n평일 기준 총 6일 (기초 데이터 수집 및 화면 설계 기간 : 2일, 개발 및 테스트 기간 : 4일)",
          "contribution": "팀 프로젝트 (2인) & 기여도 50%",
          "environment": "Windows OS, Visual Studio Code, Chrome(개발자 도구 활용)",
          "role": "book.dart  |  detail.dart",
          "keyFeatures": "1. 기록 관리 ㅣ 기록 작성 시 서버에 저장되며 비밀번호 설정을 하여 수정 및 삭제 가능\n2. 검색 ㅣ 검색 카테고리에서 책과 기록 리스트 정보 제공\n3. 별점 ㅣ 도서에 대해 1-5점 별점으로 평가 가능",
          "site": "https://heunjeok-eight.vercel.app",
          "github": "https://github.com/yeonhee001/heunjeok",
          "notion": "https://www.notion.so/soyeonhee/_-21e2ffab6063802db171ee4d51b51ae8"
        }
      ],
      "detail": [
        { "img": "DetailImg0507.png",
          "title": "기록 관리",
          "content": "책 상세페이지에서 도서에 관한 기록을 작성하게 되는데, 별점, 닉네임, 내용, 비밀번호를 입력하여 등록이 가능합니다.\n이 때, 입력한 비밀번호를 기반으로 기록 수정 및 삭제가 가능합니다.\n기록 작성 시, 유효성 검사를 통해 서버에 저장하게 되는데, 동일한 닉네임을 제외시키기 위해 서버로 닉네임 전송 후 사용 가능 여부를 판단하게 됩니다. 비밀번호 또한 정규식 검사를 통해 영문, 숫자, 특수문자 포함 6자 이상만 통과되도록 작업하였습니다."
        },
        { "img": "DetailImg0508.png",
          "title": "검색",
          "content": "최근 검색어 기능에서는 사용자가 검색한 키워드가 최대 10개까지 hive를 통해 저장되며, 저장된 검색어는 가로 스크롤 형태로 표시되게 됩니다.\n도서 탭과 기록 탭 두가지로 분류되어 해당 콘텐츠에 맞게 정보를 확인할 수 있습니다."
        }
      ],
      "issue": [
        { 
          "title": "detail.dart",
          "list": [
            {
              "content": "1. 기록 내용 수정 삭제 시, 비밀번호가 일치하는데 불일치하다는 메시지가 뜨는 상황과 비밀번호 입력 후 수정 시, 해당 기록 데이터에 값이 변경되는게 아니라 새로 추가되는 이슈 발생",
              "text2": "⇒ 해결방법: 서버에 보낼 데이터 중 칼럼 값이 누락되어 기능이 오작동하여, JSON body 구조를 재점검하고 필수 값을 모두 포함하도록 수정"
            }
          ]
        },
        {
          "title": "insert.dart",
          "list": [
            {
              "content": "1. 프론트의 검색-기록 탭에서 실제로는 리뷰가 1개 밖에 없는데, 검색 결과가 비정상적으로 많이 나오는 이슈 발생",
              "text1": "*reviews 테이블과 book 테이블을 book_id 기준으로 JOIN하는데, book 테이블에 중복된 book_id가 있어서 하나의 리뷰가 중복된 책 행 수만큼 곱해져서 출력",
              "text2": "⇒ 해결방법: book 테이블에서 중복된 book_id 데이터를 삭제하고, book_id가 유일하게 유지되도록 데이터 정리"
            }
          ]
        }
      ]
    }
  ],
  "alkialka": [
    {
      "info": [
        { "id": 7,
          "logo": "alkialkaLogo.svg",
          "slideImage": ["DetailImg0701.png", "DetailImg0702.png", "DetailImg0703.png"],
          "title": "알키알카",
          "tools": ["Imweb", "Photoshop", "Illustrator"],
          "desc": "웹사이트 유지보수",
          "intro": "자사 쇼핑몰의 시즌별 콘텐츠 운영과 이벤트 홍보를 위해 아임웹을 기반으로 웹사이트를 유지보수하였습니다.",
          "period": "2022.06 ~ 2024.03 (기간 내 상시 유지보수 작업)",
          "contribution": "팀 내 1인 & 기여도 100%",
          "environment": "Imweb(아임웹), Photoshop, Illustrator",
          "role": "웹 콘텐츠 운영 | 메인 배너 & 이벤트 제작",
          "keyFeatures": "1. 시즌별 웹사이트 메인 이미지 및 배너 교체\n2. 팝업창 제작 및 이벤트 프로모션 노출\n3. 신상품 등록 및 카테고리 관리\n4. 시즌 종료 시, 메인 페이지 전체 레이아웃 리뉴얼\n5. 아임웹 에디터를 활용한 콘텐츠 구성 및 이미지 정렬"
        }
      ],
      "detail": [
        { "img": "DetailImg0704.png"}
      ],
      "issue": [
        { 
          "img": ["DetailImg0705.png, DetailImg0706.png"]
        }
      ]
    }
  ]
}
